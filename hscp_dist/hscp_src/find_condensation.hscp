procedure dfs1($arcs, $current, $used, $queue) {
    if3 !($used; auto{_a_p}; $current) {
        genElStr3($used, auto{_a_p}, $current);

        for5($current; auto{_a_c}; new $elem; auto{_a_p}; $arcs)
            dfs1($arcs, $elem, $used, $queue);

        add_vertex_to_queue($queue, $current);
    }

    return;
}

procedure dfs2($arcs, $current, $used, $scc, $condensation) {
    if3 !($used; auto{_a_p}; $current) {
        genElStr3($used, auto{_a_p}, $current);
        genElStr5($condensation, auto{_a_p}, $current, auto{_a_p}, $scc);

        for5(new $elem; auto{_a_c}; $current; auto{_a_p}; $arcs)[new $unused{rrel_set_1}]
            dfs2($arcs, $elem, $used, $scc, $condensation);
    }

    return;
}

procedure dfs3($arcs, $current, $used, $scc, $condensation, $con_arcs, $con_all) {
    if3 !($used; auto{_a_p}; $current) {
        searchElStr5($condensation, auto{_a_p}, $current, auto{_a_p}, new $current_scc{_a});

        ife($scc; $current_scc) {
            genElStr3($used, auto{_a_p}, $current);

            //from original scc - just propagate dfs
            for5($current; auto{_a_c}; new $elem; auto{_a_p}; $arcs)
                dfs3($arcs, $elem, $used, $scc, $condensation, $con_arcs, $con_all);
        } else {
            //from another scc - add arc
            new $v1;
            new $v2;

            searchElStr5($scc{_f}, auto{_a_p}, $v1{_a}, auto{_a_p}, rrel_representation);
            searchElStr5($current_scc{_f}, auto{_a_p}, $v2{_a}, auto{_a_p}, rrel_representation);

            if3 !($v1; auto{_a_c}; $v2) {
                genElStr3($v1{_f}, new $new_arc{_a_c, _a, rrel_const}, $v2{_f});
                genElStr3($con_arcs, auto{_a_p}, $new_arc{_f});

                //all
                genElStr3($con_all, auto{_a_p}, $new_arc{_f});
            }
        }
    }

    return;
}

procedure find_condensation($graph, $result) {
    searchElStr5($graph, auto{_a_p}, new $arcs{_a}, auto{_a_p}, rrel_arcs);
    searchElStr5($graph, auto{_a_p}, new $vertices{_a}, auto{_a_p}, rrel_nodes);

    new $used = ...;
    new $queue = ...;

    //make a queue
    for3 ($vertices; auto{_a_p}; new $vertex)
        dfs1($arcs, $vertex, $used, $queue);

    //initialize stage two
    new $condensation = ...;
    new $scc_aggregator = ...;
    new $condensation_graph = $result;

    genElStr5($condensation_graph{_f}, auto{_a_p}, new $condensation_graph_nodes{_e, _a}, auto{_a_p}, rrel_nodes);
    genElStr5($condensation_graph{_f}, auto{_a_p}, new $condensation_graph_arcs{_e, _a}, auto{_a_p}, rrel_arcs);
    genElStr5($condensation_graph{_f}, auto{_a_p}, new $condensation_graph_all{_e, _a}, auto{_a_p}, rrel_all);

    eraseEl($used{rrel_erase, _f});
    $used = ...;

    //stage two - determine SCCs
    new $current_element = $queue;

    for5($queue; auto{_a_p}; new $element; auto{_a_p}; rrel_queue_element) {
        searchElStr5($current_element{_f}, auto{_a_p}, $current_element{_a}, auto{_a_p}, rrel_next_queue_element);
        searchElStr5($current_element{_f}, auto{_a_p}, new $vertex{_a}, auto{_a_p}, rrel_queue_element_value);

        //now we have another vertex in $vertex
        if3 !($used; auto{_a_p}; $vertex) {
            new $scc = ...;
            dfs2($arcs, $vertex, $used, $scc, $condensation);

            //add scc to scc aggregator
            genElStr3($scc_aggregator{_f}, auto{_a_p}, $scc{_f});

            //make vertex of representation in condensation graph
            genElStr5($scc{_f}, auto{_a_p}, new $cg_vertex{_e, _a}, auto{_a_p}, rrel_representation);

            //add $cg_vertex to nodes of condensation graph
            genElStr3($condensation_graph_nodes{_f}, auto{_a_p}, $cg_vertex{_f});

            //rrel_all
            genElStr3($condensation_graph_all{_f}, auto{_a_p}, $cg_vertex{_f});
        }
    }

    eraseEl($used{rrel_erase, _f});
    $used = ...;

    //stage three - let's make some arcs
    for3($scc_aggregator; auto{_a_p}; new $scc) {
        searchElStr5($condensation{_f}, auto{_a_p}, new $vertex{_a}, auto{_a_p}, $scc{_f});

        dfs3($arcs, $vertex, $used, $scc, $condensation, $condensation_graph_arcs, $condensation_graph_all);
    }

    //freeing
    eraseEl($used{rrel_erase, _f});
    eraseEl($condensation{rrel_erase, _f});

    //queue
    for5+($queue; auto{_a_p}; new $elem; auto{_a_p}; rrel_queue_element)
        eraseEl($elem{rrel_erase, _f});

    eraseEl($queue{rrel_erase, _f});

    //SCCs
    for3+($scc_aggregator; auto{_a_p}; new $scc)
        eraseEl($scc{rrel_erase, _f});

    eraseEl($scc_aggregator{rrel_erase, _f});

    return;
}

procedure hscp_run_tests() {
    find_condensation(TestGraph0, t0);
    find_condensation(TestGraph1, t1);
    find_condensation(TestGraph2, t2);
    find_condensation(TestGraph3, t3);
    find_condensation(TestGraph4, t4);

    return;
}

procedure add_vertex_to_queue($queue, $vertex) {
    new $node = ...;
    echo $vertex;
    //get first element
    if5($queue; new $beg_to_first_arc{_a_p}; new $last_element; auto{_a_p}; rrel_next_queue_element) {
        eraseEl($beg_to_first_arc{rrel_erase, _f});

        //connect new element with old first one
        genElStr5($node{_f}, auto{_a_p}, $last_element{_e, _f}, auto{_a_p}, rrel_next_queue_element);
    }

    //connect the beginning of queue with new element
    genElStr5($queue, auto{_a_p}, $node{_f}, auto{_a_p}, rrel_next_queue_element);
    genElStr5($node{_f}, auto{_a_p}, $vertex, auto{_a_p}, rrel_queue_element_value);

    //add element to queue elements
    genElStr5($queue, auto{_a_p}, $node{_f}, auto{_a_p}, rrel_queue_element);

    return;
}